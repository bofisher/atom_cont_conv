# Atom Echo firmware for ESPHome. See README for details.
substitutions:
  ding_sound: "https://example.com/ack.mp3"
  micro_wake_word_model: "https://example.com/model.json"

esphome:
  min_version: 2025.8.3
  on_boot:
    - priority: 650
      then:
      - light.turn_on:
          id: led
          blue: 0%
          red: 0%
          green: 50%
          brightness: 100%

esp32:
  board: m5stack-atom
  cpu_frequency: 240MHz
  framework:
    type: esp-idf

globals:
  - id: continue_convo
    type: bool
    restore_value: no
    initial_value: 'false'

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true
    sample_rate: 16000
    correct_dc_offset: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO21
    dac_type: external
    bits_per_sample: 16bit
    sample_rate: 16000
    channel: mono #mono will have bad performance, however, we are not using the on device speaker
    buffer_duration: 60ms

media_player:
  - platform: speaker
    name: None
    id: echo_media_player
    announcement_pipeline:
      speaker: echo_speaker
      format: WAV
    codec_support_enabled: false
    buffer_size: 4000 #4000 is minimum, and we are not using the on device speaker

voice_assistant:
  id: va
  microphone:
    microphone: echo_microphone
    channels: 0
    gain_factor: ${mic_gain} # Memory sensitive; recommended range 4-10.
  media_player: echo_media_player
  use_wake_word: false
  noise_suppression_level: 3
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_start:
    - micro_wake_word.stop:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: None
  on_listening:
    - wait_until:
      - binary_sensor.is_off: tts_playing
    - microphone.unmute:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
    - homeassistant.service:
        service: script.play_tts_message_media_player_v2
        data_template:
          message: "{{my_tts}}"
          player: "{{my_player}}"
        variables:
          my_tts: !lambda 'return "${ding_sound}";'
          my_player: !lambda 'return "${default_speaker}";'
  on_tts_start:
    then:
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 100%
          brightness: 0%
          effect: "Fast Pulse"  
      - homeassistant.service:
          service: input_text.set_value
          data:
            entity_id: input_text.tts_transcript
            value: !lambda 'return x;'
      - script.execute:
          id: check_if_question
          response_text: !lambda 'return x;'
  on_tts_end:
    then:
      - microphone.mute:
      - homeassistant.service:
          service: script.play_tts_message_media_player_v2
          data_template:
            message: "{{ my_tts }}"
            player: "{{ my_player }}"
          variables:
            my_tts: !lambda 'return x;'
            my_player: !lambda 'return "${default_speaker}";'
  on_end:
    then:
      - delay: 250ms
      - wait_until:
         - binary_sensor.is_off: tts_playing
      - if:
          condition:
            lambda: return !id(continue_convo);
          then:
            - voice_assistant.stop:
            - wait_until:
              - binary_sensor.is_off: tts_playing
            - micro_wake_word.start:
            - script.execute: reset_led
          else:
            - wait_until:
                - binary_sensor.is_off: tts_playing
            - voice_assistant.start:
      - microphone.unmute:
  on_client_connected:
    - script.execute: reset_led
    - delay: 2s
    - micro_wake_word.start:

binary_sensor:
  - platform: homeassistant
    id: tts_playing
    entity_id: input_boolean.tts_playing

text_sensor:
  - platform: homeassistant
    id: assist_devices_active_list
    entity_id: sensor.assist_devices_active_list

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: None
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: check_if_question
    parameters:
      response_text: string
    then:
      - lambda: |-
          if (response_text.size() > 0 && response_text[response_text.size() - 1] == '?') {
            id(continue_convo) = true;
          } else {
            id(continue_convo) = false;
          }
  - id: reset_led
    then:
      - light.turn_on:
          id: led
          red: 90%
          green: 89%
          blue: 71%
          brightness: 60%
          effect: none

micro_wake_word:
  vad:
    model: github://esphome/micro-wake-word-models/models/v2/vad.json
    probability_cutoff: 0.45
  models:
    - model: ${micro_wake_word_model}
on_wake_word_detected:
  then:
    - delay: 250ms
    - if:
        condition:
          - binary_sensor.is_off: tts_playing
        then:
          - logger.log: "Starting voice_assistant to claim winning spot"
          - voice_assistant.start:
          - wait_until:
              condition:
                lambda: return id(assist_devices_active_list).state != "idle";
              timeout: 2s
          - if:
              condition:
                - lambda: return (id(assist_devices_active_list).state).find("${name}") == 0;
              then:
                - homeassistant.service:
                    #first ding after wake word
                    service: script.play_tts_message_media_player_v2
                    data_template:
                      message: "{{my_tts}}"
                      player: "{{my_player}}"
                    variables:
                      my_tts: !lambda 'return "${ding_sound}";'
                      my_player: !lambda 'return "${default_speaker}";'
              else:
                - logger.log: "Wake word ignored and voice_assitant stopping: Another device is already active"
                - voice_assistant.stop:
        else:
          - logger.log: "Wake word ignored: TTS playback active."
